<!-- public/upload.ejs -->

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>S3 파일 관리 콘솔</title>
    <style>
        body { font-family: sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        h1, h3 { color: #333; }
        hr { border: 0; height: 1px; background: #ccc; margin: 20px 0; }
        form { background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        input[type="file"], select { margin-bottom: 10px; border: 1px solid #ddd; padding: 8px; border-radius: 4px; display: block; width: calc(100% - 18px); }
        button { background-color: #007bff; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; margin-top: 10px; }
        button:hover { background-color: #0056b3; }
        iframe { border: 1px solid #ddd; border-radius: 8px; margin-top: 20px; }
        .comparison-form { display: flex; flex-direction: column; gap: 10px; }
        .comparison-form select { width: 100%; }
    </style>
</head>
<body>
    <h1><i>S3</i> 파일 관리 콘솔</h1>
    <hr />
    <h3>파일 업로드</h3>
    <form action="/uploadFile" enctype="multipart/form-data" method="post">
        <input type="file" name="audiofile1" id="file1">
        <input type="file" name="audiofile2" id="file2">
        <button type="submit">업로드</button>
    </form>
    <hr />

    <h3>오디오 파일 비교</h3>
    <form id="compareForm" action="/compareAudio" method="post" class="comparison-form" target="_blank">
        <label for="file1">이전 파일 선택:</label>
        <select id="file1" name="file1Key">
            <option value="">-- 파일을 선택하세요 --</option>
            <!-- JavaScript로 S3 파일 목록을 여기에 동적으로 채울 예정 -->
        </select>

        <label for="file2">이후 파일 선택:</label>
        <select id="file2" name="file2Key">
            <option value="">-- 파일을 선택하세요 --</option>
            <!-- JavaScript로 S3 파일 목록을 여기에 동적으로 채울 예정 -->
        </select>

        <button type="submit">비교</button>
    </form>
    <hr />

    <h3>S3 파일 목록</h3>
    <iframe name="fileListFrame" width="100%" height="500" style="border: none;" src="/list"></iframe>

    <script>
        // S3 파일 목록을 가져와 비교 폼의 드롭다운에 채우는 함수
        async function populateFileList() {
            try {
                // iframe src="/list"에서 직접 DOM을 조작하는 것은 보안상 어려움.
                // 대신 새로운 fetch 요청으로 S3 목록을 JSON으로 가져오도록 백엔드 라우트 추가 고려.
                // 지금은 /list 라우트가 HTML을 반환하므로, 목록 iframe을 활용하여 직접 파일명을 가져오는 방식으로 구현
                // (이 방법은 iframe의 Same-Origin Policy에 따라 제약을 받을 수 있습니다.
                // 만약 작동하지 않으면 /api/listJson 라우트를 main.js에 추가하여 JSON 목록을 직접 반환하도록 수정해야 합니다.)

                // 간단한 방법을 위해, /list에서 반환하는 HTML을 파싱하여 파일 목록을 가져오기 시도
                const response = await fetch('/list');
                const htmlText = await response.text();

                const parser = new DOMParser();
                const doc = parser.parseFromString(htmlText, 'text/html');
                const tableRows = doc.querySelectorAll('table tr'); // 테이블의 모든 행을 가져옴

                const file1Select = document.getElementById('file1');
                const file2Select = document.getElementById('file2');

                // 기존 옵션 초기화 (기본 '-- 파일을 선택하세요 --' 옵션 제외)
                file1Select.innerHTML = '<option value="">-- 파일을 선택하세요 --</option>';
                file2Select.innerHTML = '<option value="">-- 파일을 선택하세요 --</option>';

                // 각 파일 행에서 Key (파일명) 추출하여 드롭다운에 추가
                tableRows.forEach((row, index) => {
                    // 첫 번째 행은 헤더이므로 건너뛰기
                    if (index === 0) return;

                    const keyCell = row.querySelector('td:first-child'); // 첫 번째 td가 Key라고 가정
                    if (keyCell) {
                        const filename = keyCell.textContent.trim();
                        if (filename) {
                            const option1 = document.createElement('option');
                            option1.value = filename;
                            option1.textContent = filename;
                            file1Select.appendChild(option1);

                            const option2 = document.createElement('option');
                            option2.value = filename;
                            option2.textContent = filename;
                            file2Select.appendChild(option2);
                        }
                    }
                });

            } catch (error) {
                console.error('파일 목록을 불러오는 중 오류 발생:', error);
                // 사용자에게 오류 메시지 표시
                alert('파일 목록을 불러오지 못했습니다. 콘솔을 확인해주세요.');
            }
        }

        // 페이지 로드 시 파일 목록 채우기
        populateFileList();

        // 파일 업로드 폼 제출 후 목록 새로고침
        document.getElementById('uploadForm').addEventListener('submit', function() {
            // 업로드 완료 후 iframe 목록 새로고침을 위해 약간의 지연
            setTimeout(() => {
                document.getElementById('fileListFrame').contentWindow.location.reload(true);
                populateFileList(); // 비교 드롭다운도 새로고침
            }, 1000); // 1초 후 새로고침 (업로드 완료 시간 고려)
        });
    </script>
</body>
</html>
